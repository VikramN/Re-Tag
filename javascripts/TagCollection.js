// Generated by CoffeeScript 1.8.0
(function() {
  this.TagCollection = (function() {
    function TagCollection(options) {
      this._index = 0;
      this._tags = [];
      this._observers = [];
      this._onAdd = options && typeof options.onAdd === 'function' ? options.onAdd : null;
      this._onDelete = options && typeof options.onDelete === 'function' ? options.onDelete : null;
    }

    TagCollection.prototype._add = function(tag) {
      tag = this._onAdd ? this._onAdd(tag, this._tags) : tag;
      if (tag) {
        this._index++;
        this._tags.push({
          tag: tag,
          key: '' + this._index
        });
      }
    };

    TagCollection.prototype.addRange = function(tags) {
      var t, _i, _len;
      for (_i = 0, _len = tags.length; _i < _len; _i++) {
        t = tags[_i];
        if (t && t !== '') {
          this._add(t);
        }
      }
      this._fire();
    };

    TagCollection.prototype.add = function(tag) {
      this._add(tag);
      this._fire();
    };

    TagCollection.prototype.remove = function(key) {
      var remove, t;
      remove = this._onDelete ? this._onDelete(key, this._tags) : true;
      if (remove) {
        this._tags = (function() {
          var _i, _len, _ref, _results;
          _ref = this._tags;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            t = _ref[_i];
            if (t.key !== key) {
              _results.push(t);
            }
          }
          return _results;
        }).call(this);
        this._fire();
      }
    };

    TagCollection.prototype.listen = function(callback) {
      if (callback) {
        this._observers.push(callback);
      }
    };

    TagCollection.prototype.getTags = function() {
      var t;
      return (function() {
        var _i, _len, _ref, _results;
        _ref = this._tags;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          t = _ref[_i];
          _results.push(t.tag);
        }
        return _results;
      }).call(this);
    };

    TagCollection.prototype._fire = function() {
      var c, _i, _len, _ref;
      _ref = this._observers;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        c = _ref[_i];
        c();
      }
    };

    return TagCollection;

  })();

}).call(this);


