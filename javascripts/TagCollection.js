// Generated by CoffeeScript 1.8.0
(function() {
  this.TagCollection = (function() {
    function TagCollection(options) {
      var dup;
      this._index = 0;
      this._tags = [];
      this._observers = [];
      this._allowDups = true;
      this._contains = (function(_this) {
        return function(tag) {
          var t, _i, _len, _ref;
          _ref = _this._tags;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            t = _ref[_i];
            if (tag === t.tag) {
              return true;
            }
          }
          return false;
        };
      })(this);
      if (options && options.duplicates && 'allow' in options.duplicates) {
        dup = options.duplicates;
        this._allowDups = dup.allow;
        if (!this._allowDups && dup.contains && typeof dup.contains === 'function') {
          this._contains = (function(_this) {
            return function(item) {
              return dup.contains(item, _this._tags);
            };
          })(this);
        }
      }
    }

    TagCollection.prototype._add = function(tag) {
      if (this._allowDups || (!this._allowDups && !this._contains(tag))) {
        this._index++;
        return this._tags.push({
          tag: tag,
          key: '' + this._index
        });
      }
    };

    TagCollection.prototype.addRange = function(tags) {
      var t, _i, _len;
      for (_i = 0, _len = tags.length; _i < _len; _i++) {
        t = tags[_i];
        if (t && t !== '') {
          this._add(t);
        }
      }
      this._fire();
    };

    TagCollection.prototype.add = function(tag) {
      this._add(tag);
      this._fire();
    };

    TagCollection.prototype.remove = function(key) {
      var t;
      this._tags = (function() {
        var _i, _len, _ref, _results;
        _ref = this._tags;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          t = _ref[_i];
          if (t.key !== key) {
            _results.push(t);
          }
        }
        return _results;
      }).call(this);
      this._fire();
    };

    TagCollection.prototype.listen = function(callback) {
      if (callback) {
        this._observers.push(callback);
      }
    };

    TagCollection.prototype.getTags = function() {
      var t;
      return (function() {
        var _i, _len, _ref, _results;
        _ref = this._tags;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          t = _ref[_i];
          _results.push(t.tag);
        }
        return _results;
      }).call(this);
    };

    TagCollection.prototype._fire = function() {
      var c, _i, _len, _ref;
      _ref = this._observers;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        c = _ref[_i];
        c();
      }
    };

    return TagCollection;

  })();

}).call(this);

